name: EC2 deploy

on:
  push:
    branches: [main, master]
    paths:
      - hello-ecr/**
      - .github/workflows/deploy-minimal-runsh.yml
  workflow_dispatch:

concurrency:
  group: ec2-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-1
  EC2_INSTANCE_ID: i-073a21fcc0170cef6
  APP_PORT: "5000"        # passed to run.sh as env var

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build artifact (tar hello-ecr/)
        run: |
          mkdir -p dist
          tar -czf dist/hello-ecr.tgz -C hello-ecr .
          (cd dist && sha256sum hello-ecr.tgz > hello-ecr.tgz.sha256)

      - uses: actions/upload-artifact@v4
        with:
          name: hello-ecr-artifact
          path: dist/
          compression-level: 0

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: hello-ecr-artifact
          path: ./artifact

      - name: Verify artifact
        run: cd artifact && sha256sum -c hello-ecr.tgz.sha256

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 public IP
        id: ip
        run: |
          ip=$(aws ec2 describe-instances \
              --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
          if [ -z "$ip" ] || [ "$ip" = "None" ]; then
            echo "This instance has no public IP. Attach an Elastic IP or use SSM."
            exit 1
          fi
          echo "HOST=$ip" >> $GITHUB_OUTPUT

      - name: Prepare SSH key
        run: |
          mkdir -p ./ssh
          echo "${{ secrets.EC2_PRIVATE_KEY_PEM }}" > ./ssh/key.pem
          chmod 600 ./ssh/key.pem

      - name: SSH bootstrap (known_hosts + wait for port 22)
        env:
          HOST: ${{ steps.ip.outputs.HOST }}
        run: |
          mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts
          for i in {1..30}; do nc -z "$HOST" 22 && break || (echo "waiting for ssh..." && sleep 5); done

      - name: Upload & run (Ubuntu + run.sh)
        env:
          HOST: ${{ steps.ip.outputs.HOST }}
          APP_PORT: ${{ env.APP_PORT }}
        run: |
          scp -i ./ssh/key.pem ./artifact/hello-ecr.tgz ubuntu@"$HOST":/home/ubuntu/hello-ecr.tgz
          ssh -i ./ssh/key.pem ubuntu@"$HOST" "bash -lc '
            set -e
            sudo apt-get update -y
            sudo apt-get install -y python3 python3-venv python3-pip tar >/dev/null
            rm -rf ~/app && mkdir -p ~/app
            tar -xzf ~/hello-ecr.tgz -C ~/app
            cd ~/app
            chmod +x run.sh
            # stop previous if running
            if [ -f app.pid ] && kill -0 \$(cat app.pid) 2>/dev/null; then kill \$(cat app.pid) || true; fi
            export APP_PORT=\"${APP_PORT}\"
            nohup bash ./run.sh > app.out 2>&1 & echo \$! > app.pid
            echo \"PID \$(cat app.pid) started on port ${APP_PORT}\"
          '"
