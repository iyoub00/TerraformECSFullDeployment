AWSTemplateFormatVersion: '2010-09-09'
Description: 'silicon talent acquisition (coexists with older stack)'

# Input parameters
Parameters:
  ProjectName:
    Type: String
    Default: 'silicon-talent-acquisition'
    Description: 'silicon talent acquisition'

  DBUsername:
    Type: String
    Default: 'master'
    Description: 'Master username pour RDS'
    NoEcho: false

  DBPassword:
    Type: String
    NoEcho: true
    Description: 'Master password pour RDS'
    MinLength: 8

  ContainerImage:
    Type: String
    Default: '881490114584.dkr.ecr.eu-west-1.amazonaws.com/ecs-lambda:latest'
    Description: 'ECR Image URI (repo:tag) for both ECS task definitions'

  AppPort:
    Type: Number
    Default: 5000
    Description: 'Port expos√© par le conteneur (Flask = 5000)'

  # NEW PARAMETERS FOR EXISTING RESOURCES
  ExistingS3BucketName:
    Type: String
    Description: 'Name of existing S3 bucket for application data'

  ExistingLogsBucketName:
    Type: String
    Description: 'Name of existing S3 bucket for ALB and S3 access logs'

  ExistingECSLogGroupName:
    Type: String
    Description: 'Name of existing CloudWatch Log Group for ECS logs'
    Default: '/ecs/silicon-talent-acquisition'

  ExistingVPCFlowLogsGroupName:
    Type: String
    Description: 'Name of existing CloudWatch Log Group for VPC Flow Logs'
    Default: '/aws/vpc/silicon-talent-acquisition-flow-logs'

Resources:

  # VPC & Networking (unchanged)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-2'

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-eip'

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-rt'

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable


  # VPC FLOW LOGS - MODIFIED TO USE EXISTING LOG GROUP

  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc-flow-logs-role'

  # REMOVED: VPCFlowLogsGroup resource (using existing)

  # VPC Flow Logs Configuration - MODIFIED
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      # CHANGED: Use parameter instead of !GetAtt
      LogDestination: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ExistingVPCFlowLogsGroupName}'
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      LogFormat: '${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc-flow-log'


  # S3 BUCKETS - REMOVED (using existing)
  # REMOVED: ALBLogsBucket
  # REMOVED: ALBLogsBucketPolicy
  # REMOVED: LogsBucket
  # REMOVED: LogsBucketPolicy (you'll need to ensure the existing bucket has the proper policy)

  # NOTE: You need to ensure your existing logs bucket has the proper bucket policy
  # See the LogsBucketPolicy section below for the policy you need to apply manually


  # Security Groups (unchanged)
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group pour ALB'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb-sg'

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group pour Fargate tasks'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-fargate-sg'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group pour RDS (PostgreSQL)'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref FargateSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-rds-sg'


  # Application Load Balancer - MODIFIED
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref ExistingLogsBucketName  # CHANGED: Use parameter
        - Key: access_logs.s3.prefix
          Value: 'alb'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb'

  ALBTargetGroupApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref AppPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  ALBTargetGroupModel:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref AppPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupApp

  ALBListenerRuleModel:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values: [ "/model*", "/model/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupModel

  ALBListenerRuleApp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 20
      Conditions:
        - Field: path-pattern
          Values: [ "/app*", "/app/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupApp


  # ECS Cluster & IAM (unchanged)
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-cluster'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ecs-execution-role'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ComprehendAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - comprehend:DetectSentiment
                Resource: "*"
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListAllMyBuckets'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  # CHANGED: Use parameter for existing bucket
                  - !Sub 'arn:aws:s3:::${ExistingS3BucketName}'
                  - !Sub 'arn:aws:s3:::${ExistingS3BucketName}/*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                Resource: 'arn:aws:bedrock:eu-west-1::foundation-model/amazon.titan-embed-text-v2:0'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: !GetAtt DynamoDBTable.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ecs-task-role'

  # REMOVED: ECSLogGroup (using existing)


  # ECS Task Definitions - MODIFIED

  FargateTaskDefinitionModel:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-model-task'
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: model-container
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: !Ref AppPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              # CHANGED: Use parameter for existing log group
              awslogs-group: !Ref ExistingECSLogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: model
          Environment:
            - Name: S3_BUCKET
              Value: !Ref ExistingS3BucketName  # CHANGED
            - Name: RDS_ENDPOINT
              Value: !GetAtt RDSInstance.Endpoint.Address

  FargateTaskDefinitionApp:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-app-task'
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: app-container
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: !Ref AppPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              # CHANGED: Use parameter for existing log group
              awslogs-group: !Ref ExistingECSLogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: app
          Environment:
            - Name: S3_BUCKET
              Value: !Ref ExistingS3BucketName  # CHANGED
            - Name: RDS_ENDPOINT
              Value: !GetAtt RDSInstance.Endpoint.Address


  # ECS Services (unchanged)
  ECSServiceModel:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${ProjectName}-model-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FargateTaskDefinitionModel
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref FargateSecurityGroup
      LoadBalancers:
        - ContainerName: model-container
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref ALBTargetGroupModel
      HealthCheckGracePeriodSeconds: 60

  ECSServiceApp:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${ProjectName}-app-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FargateTaskDefinitionApp
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref FargateSecurityGroup
      LoadBalancers:
        - ContainerName: app-container
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref ALBTargetGroupApp
      HealthCheckGracePeriodSeconds: 60


  # RDS (PostgreSQL) - unchanged
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group pour RDS'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-subnet-group'

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: postgres
      Port: 5432
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: '20'
      StorageType: gp3
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      MultiAZ: false
      PubliclyAccessible: false
      EnableCloudwatchLogsExports:
        - postgresql
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-rds'


  # REMOVED: S3Bucket (using existing)


  # DynamoDB Table (unchanged)
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub '${ProjectName}-${AWS::StackName}-table'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dynamodb'

Outputs:
  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC

  ALBDNSName:
    Description: 'DNS name du Load Balancer'
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ECSClusterName:
    Description: 'Nom du cluster ECS'
    Value: !Ref ECSCluster

  RDSEndpoint:
    Description: 'Endpoint RDS'
    Value: !GetAtt RDSInstance.Endpoint.Address

  S3BucketName:
    Description: 'Nom du bucket S3 applicatif (existing)'
    Value: !Ref ExistingS3BucketName  # CHANGED

  NATGatewayIP:
    Description: 'IP publique du NAT Gateway'
    Value: !Ref NATGatewayEIP

  LogsBucketName:
    Description: 'Nom du bucket S3 pour tous les logs (existing)'
    Value: !Ref ExistingLogsBucketName  # CHANGED

  VPCFlowLogsGroupName:
    Description: 'Nom du CloudWatch Log Group pour VPC Flow Logs (existing)'
    Value: !Ref ExistingVPCFlowLogsGroupName  # CHANGED

  ECSLogGroupName:
    Description: 'Nom du CloudWatch Log Group pour ECS (existing)'
    Value: !Ref ExistingECSLogGroupName  # CHANGED

  DynamoDBTableName:
    Description: 'Nom de la table DynamoDB'
    Value: !Ref DynamoDBTable